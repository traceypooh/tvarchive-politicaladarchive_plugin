<?xml version="1.0"?>
<!-- run with `brew install php-code-sniffer`, then `phpcs` -->
<ruleset name="petabox">
  <!-- start with PSR-2 as baseline -->
  <rule ref="PSR2">

    <!-- disabled -->
    <exclude name="Generic.Files.LineLength" />

    <!-- disabled -->
    <!-- we prefer <? not <?php -->
    <exclude name="Generic.PHP.DisallowShortOpenTag"/>

    <!-- we prefer FALSE not false for things like: if (strpos(..) === FALSE) -->
    <exclude name="Generic.PHP.LowerCaseConstant"/>

    <!-- allows 2+ SPACE chars after param comma (if desired) for vertically lining up 2+ lines -->
    <exclude name="Generic.Functions.FunctionCallArgumentSpacing.TooMuchSpaceAfterComma" />

    <!-- petabox classes _typically_ dont use namespaces -->
    <exclude name="PSR1.Classes.ClassDeclaration.MissingNamespace" />

    <!-- allow "no-braces" for if single line "then" and "else" code -->
    <exclude name="Generic.ControlStructures.InlineControlStructure.NotAllowed" />

    <!-- group is OK with snake case method names (dont restrict to _only_ camelcase) -->
    <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps"/>

    <!-- Disable PSR-2 indentation rules that are buggy with 2 space indents -->
    <exclude name="PSR2.ControlStructures.SwitchDeclaration.BreakIndent"/>
    <exclude name="PSR2.Methods.FunctionCallSignature.Indent"/>

    <!-- needed for "..OpeningFunctionBraceKernighanRitchie" below -->
    <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine" />

    <!-- Class opening braces should be on the same line as the statement. -->
    <exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNewLine" />
  </rule>


  <!-- [WP] omit closing tag at end of file -->
  <rule ref="PSR2.Files.ClosingTag"/>

  <!-- Among other things (like spaces around operators, eg: `$x = 1 + 3;`, `if ($x == 3)`), -->
  <!-- this requires spaces around ternary ops, eg: (a ? b : c) -->
  <!-- .. but allow a newline to be OK as operator spacer (eg: 3-line ternary, etc.) -->
  <!-- NOTE: "vertical alignment" where desired is still possible w/ `=` like: `$x   = 3;` -->
  <rule ref="Squiz.WhiteSpace.OperatorSpacing">
    <properties>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>


  <!-- [WP] Covers rule: Use single and double quotes when appropriate.
  		 If you're not evaluating anything in the string, use single quotes. -->
  <!-- IA extension - allow ' and \n chars in ".." to be OK -->
  <rule ref="Squiz.Strings.DoubleQuoteUsage">
    <exclude-pattern>'</exclude-pattern>
    <exclude-pattern>\t</exclude-pattern>
    <exclude-pattern>\n</exclude-pattern>
  </rule>
  <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
    <severity>0</severity>
  </rule>

  <!-- [WP] method names should have lead brace on same line -->
  <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
    <properties>
      <property name="checkClosures" value="true"/>
    </properties>
  </rule>

  <!-- Class opening braces should be on the same line as the statement. -->
  <rule ref="Generic.Classes.OpeningBraceSameLine"/>

  <!-- indent level is 2 SPACE chars not 4 -->
  <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>
  <rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <!-- disable specific rules for specific files/dirs -->
  <rule ref="PSR1.Classes.ClassDeclaration.MultipleClasses">
    <exclude-pattern>tests/php_tests/unit/www/common/*</exclude-pattern>
  </rule>
  <rule ref="PSR1.Files.SideEffects.FoundWithSymbols">
    <exclude-pattern>tests/php_tests/unit/www/common/*</exclude-pattern>
  </rule>
  <rule ref="Squiz.Scope.MethodScope.Missing">
    <exclude-pattern>tests/php_tests/unit/www/common/*</exclude-pattern>
  </rule>
</ruleset>
